# `sudo` is required for kov
sudo: required

# Set up the Rust toolchain.
language: rust
rust:
  - nightly
  - stable

# Test on Linux and macOS.
os:
  - osx
  - linux

# Allow for occasional compiler breakage on nightly Rust.
matrix:
  allow_failures:
    - rust: nightly

# Force third-party crates to persist from previous builds and update only when
# needed.
cache: cargo

# Install addonns.
addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev
      - portaudio19-dev
      # - xvfb

before_install:
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install git-lfs; fi

before_script:
    - rustup component add clippy
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then git lfs install; git lfs pull; fi
# Start Xvfb so that we could have a virtual graphics driver.
#   - |
#     if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
#       export DISPLAY=:99.0 &&
#       sh -e /etc/init.d/xvfb start &&
#       sleep 3; # give xvfb some time to start
#     fi

# Generate documentation, compile the engine, run tests/examples.
script:
    - cargo build --all --verbose
    - cargo test --all --verbose
    - cargo build --all --verbose --no-default-features
    - cargo test --all --verbose --no-default-features
    - cargo build --examples --all
    - cargo clippy --all-targets --all-features -- -D warnings
    - |
      for file in examples/*.rs; do
          if [[ -f $file ]]; then
              filename=$(basename $file);
              filename=${filename%.*};
              RUST_BACKTRACE=1 target/debug/examples/${filename} headless;
          fi
      done;
    - | 
      for file in modules/world/examples/*.rs; do
          if [[ -f $file ]]; then
              filename=$(basename $file);
              filename=${filename%.*};
              RUST_BACKTRACE=1 target/debug/examples/${filename} headless;
          fi
      done;
    - | 
      for file in modules/audio/examples/*.rs; do
          if [[ -f $file ]]; then
              filename=$(basename $file);
              filename=${filename%.*};
              RUST_BACKTRACE=1 target/debug/examples/${filename} headless;
          fi
      done;

# Perform coverage test based on kcov, and upload it.
after_success: |
  if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
    wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
    tar xzf master.tar.gz &&
    cd kcov-master &&
    mkdir build &&
    cd build &&
    cmake .. &&
    make &&
    make install DESTDIR=../../kcov-build &&
    cd ../.. &&
    rm -rf kcov-master &&
    for file in target/debug/*-*[^\.d]; do mkdir -p "target/cov/tests_$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/tests_$(basename $file)" "$file"; done &&
    for file in examples/*.rs; do if [[ -f $file ]]; then filename=$(basename $file); filename=${filename%.*}; mkdir -p "target/cov/examples_$filename"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/examples_$filename" "target/debug/examples/${filename}" "headless"; fi done &&
    for file in modules/world/examples/*.rs; do if [[ -f $file ]]; then filename=$(basename $file); filename=${filename%.*}; mkdir -p "target/cov/examples_$filename"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/examples_$filename" "target/debug/examples/${filename}" "headless"; fi done &&
    for file in modules/audio/examples/*.rs; do if [[ -f $file ]]; then filename=$(basename $file); filename=${filename%.*}; mkdir -p "target/cov/examples_$filename"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/examples_$filename" "target/debug/examples/${filename}" "headless"; fi done &&
    bash <(curl -s https://codecov.io/bash);
  fi